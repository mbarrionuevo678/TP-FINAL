name: 🚀 Deploy Infrastructure and Applications 🌐

on:
  workflow_dispatch:  # Permite ejecutar manualmente desde la interfaz de GitHub Actions

jobs:
  build-and-push-docker-image:
    runs-on: ubuntu-latest

    steps:
    - name: 🛠️ Checkout code
      uses: actions/checkout@v2

    - name: 🔨 Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: 🔒 Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: 📦 Build and Push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/my-web-app:latest .
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-web-app:latest

  deploy-applications:
    needs: build-and-push-docker-image
    runs-on: ubuntu-latest

    steps:
    - name: 🛠️ Checkout code
      uses: actions/checkout@v2

    - name: 🛡️ Set up kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: 📄 Get Kubeconfig
      run: aws eks update-kubeconfig --name DevOpsGroup7 --region us-east-1

    - name: 📦 Deploy EBS CSI Driver
      run: kubectl apply -f manifests/ebs-csi-driver.yaml

    - name: 📊 Deploy Grafana
      run: |
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update
        kubectl apply -f manifests/persistent_volume_claim_grafana.yaml
        helm install grafana grafana/grafana --set persistence.enabled=true --set persistence.existingClaim=grafana-pvc

    - name: 📈 Deploy Prometheus
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update
        kubectl apply -f manifests/persistent_volume_claim_prometheus.yaml
        helm install prometheus prometheus-community/prometheus --set server.persistentVolume.existingClaim=prometheus-pvc

    - name: 🌐 Deploy NGINX with Docker Image
      run: |
        kubectl apply -f manifests/persistent_volume_claim_nginx.yaml
        kubectl apply -f manifests/nginx-deployment.yaml
        kubectl apply -f manifests/nginx-service.yaml

    - name: 🔍 Verify Deployment
      run: |
        kubectl get pods
        kubectl get services

    - name: 🎉 Felicitaciones 🎉
      if: success()
      run: |
        echo "¡Felicitaciones! Las aplicaciones se han desplegado correctamente."
        echo "Puedes acceder a NGINX en la siguiente URL: http://$(kubectl get svc nginx-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
