name: 🚀 Deploy Application 🌐

on:
  workflow_dispatch:

jobs:
  deploy-applications:
    runs-on: ubuntu-latest

    steps:
    - name: 🛠️ Checkout code
      uses: actions/checkout@v2

    - name: 🛡️ Set up kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Configure kubectl
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        echo "${KUBE_CONFIG_DATA}" | base64 --decode > kubeconfig.yaml
        kubectl config view --kubeconfig=kubeconfig.yaml

    - name: Install EBS CSI Driver
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        kubectl apply -f manifests/ebs-csi-driver.yaml --kubeconfig=kubeconfig.yaml

    - name: Debug kubeconfig
      run: |
        cat kubeconfig.yaml

    - name: Verify connectivity
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        kubectl get nodes --kubeconfig=kubeconfig.yaml

    - name: Build and push Docker image
      env:
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
      run: |
        docker build -t my-docker-image:latest .
        echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
        docker push my-docker-image:latest

    - name: Create namespace if not exists
      run: |
        kubectl create namespace my-namespace || true

    - name: Deploy to Kubernetes
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        kubectl apply -f manifests/persistent_volume_grafana.yaml --kubeconfig=kubeconfig.yaml
        kubectl apply -f manifests/persistent_volume_claim_grafana.yaml --kubeconfig=kubeconfig.yaml
        kubectl apply -f manifests/persistent_volume_prometheus.yaml --kubeconfig=kubeconfig.yaml
        kubectl apply -f manifests/persistent_volume_claim_prometheus.yaml --kubeconfig=kubeconfig.yaml
        kubectl apply -f manifests/persistent_volume_nginx.yaml --kubeconfig=kubeconfig.yaml
        kubectl apply -f manifests/persistent_volume_claim_nginx.yaml --kubeconfig=kubeconfig.yaml
        kubectl apply -f manifests/nginx-deployment.yaml --kubeconfig=kubeconfig.yaml
        kubectl apply -f manifests/nginx-service.yaml --kubeconfig=kubeconfig.yaml
